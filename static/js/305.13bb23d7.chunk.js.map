{"version":3,"file":"static/js/305.13bb23d7.chunk.js","mappings":"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","sources":["container/commas.tsx","container/common/Map.tsx","components/UserSearch.tsx"],"sourcesContent":["// Import the `axios` library and the `AxiosInstance` type from the `axios` package\nimport axios, { AxiosInstance } from 'axios';\n\n// Create a new instance of `axios` with some default configuration options\nexport const instance: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL?.trim() || '', // The base URL for all requests made with this instance\n  headers: {\n    'Content-type': 'application/json',\n  },\n  timeout: 5000, // The maximum number of milliseconds to wait for a request to complete\n});\n\nexport const API_URL = process.env.REACT_APP_API_URL?.trim() || '';\n","import React from 'react';\nimport { MapProps } from '../../@types/Type';\n\n// Define the component as a function that takes the props as an argument\nfunction Map<T>({ data, renderItem }: MapProps<T>): JSX.Element {\n  /*\n   * ‚Ä¢ Use the `map` method to iterate over the `data` array and render\n   * the items using the `renderItem` function\n   */\n  return (\n    <React.Fragment>\n      {data.map((element, index) => renderItem(element, index))}\n    </React.Fragment>\n  );\n}\n\n/*\n *   ‚Ä¢ Export the component and its props interface for use in other parts\n *   of the application\n */\nexport default Map;\n","import React from 'react';\nimport { API_URL } from '../container/commas';\n\nimport Map from '../container/common/Map';\n\nconst Button = React.lazy(() => import('../container/common/Button'));\nconst Form = React.lazy(() => import('../container/common/Form'));\nconst Img = React.lazy(() => import('../container/common/Img'));\n\ninterface User {\n  login: string | undefined;\n  avatar_url: string | undefined;\n  html_url: string | undefined;\n};\n\nconst UserSearch: React.FC = (): JSX.Element => {\n  // üëáÔ∏è pass empty string as initial value\n  const [query, setQuery] = React.useState<string>('');\n  const [results, setResults] = React.useState<User[]>([]);\n\n  async function fetchResults(query: string): Promise<User[]> {\n    try {\n      const response = await fetch(`${API_URL}/search/users?q=${query}`);\n      const json = await response.json();\n      return json.items || [];\n    } catch (error: any) {\n      throw new Error(error.message);\n    };\n  };\n\n  /**\n   * Here we restrict all handleSubmits to be exclusively on\n   * HTMLFormElement Elements\n   *\n   * We're using `FormEventHandler` as type for the event.\n   * with `HTMLFormElement` as a type parameter.\n   * It contains properties an event can have\n   * and methods (such as `preventDefault` an others).\n   * be fired on an HTML <button> element.\n   **/\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (event: React.FormEvent<HTMLFormElement>) => {\n    // üëáÔ∏è prevent page refresh\n    event?.preventDefault();\n    const results = await fetchResults(query);\n    setResults(results);\n  };\n\n  /**\n   * Here we restrict all handleChanges to be exclusively on\n   * HTMLInputElement Elements\n   *\n   * We're using `ChangeEvent` as type for the event.\n   * with `HTMLInputElement` as a type parameter.\n   * It contains properties an event can have\n   * and methods (such as `preventDefault` an others).\n   **/\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    // üëáÔ∏è prevent page refresh\n    event?.preventDefault();\n    /*\n     *\n     * Here, 'EventTarget & HTMLInputElement' is a type that represents an object that can be both an\n     * 'EventTarget' and an 'HTMLInputElement'.\n     *\n     * The 'value' property is specific to 'HTMLInputElement' objects, which  means that it may not\n     * exist on all objects that implement the 'EventTarget' interface.\n     *\n     */\n    const inputElement = event.target as HTMLInputElement;\n    const inputValue = inputElement.value;\n    setQuery(inputValue);\n  };\n\n  /*\n   * This function takes an element of type `User` and an index of type `number` as parameters.\n   */\n  function renderMyDataItem(element: User, index: number): React.ReactNode {\n    /*\n     *\n     * The function returns a React node that renders the markup for the given `User` element.\n     *\n     * A `div` element is rendered with a class of `\"card\"`.\n     * The `key` attribute is set to the `element.login` value if it exists, otherwise it is\n     * set to the `index` value.\n     *\n     */\n    return (\n      <div className='card' key={element.login ? element.login : index}>\n        <Img src={element.avatar_url} alt={element.login} ImageId='cardImage' />\n        <a href={element.html_url} target='_blank' rel='noopener noreferrer'>\n          <Button\n            buttonText='GitHub'\n            className='fa-brands fa-github'\n            id='card-button'\n          />\n        </a>\n      </div>\n    );\n  };\n\n  /*\n   * üëáÔ∏ètype assertion\n   * ‚úÖ value={query as string}\n   */\n  return (\n    <React.Fragment>\n      <div className='userSearchMain'>\n        <div className='userSearchHeading'>GitHub User Search</div>\n        <Form\n          onSubmit={handleSubmit}\n          onChange={handleChange}\n          value={query}\n          InputId='userSearchInput'\n          className='fa-solid fa-magnifying-glass'\n          ButtonId='userSearchButton'\n        />\n      </div>\n      <Map data={results} renderItem={renderMyDataItem} />\n    </React.Fragment>\n  );\n};\n\nexport default UserSearch;"],"names":["API_URL","axios","baseURL","_process$env$REACT_AP","process","trim","headers","timeout","_process$env$REACT_AP2","_ref","data","renderItem","_jsx","React","children","map","element","index","Button","Form","Img","_React$useState","_React$useState2","_slicedToArray","query","setQuery","_React$useState3","_React$useState4","results","setResults","fetchResults","_x","_fetchResults","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","response","json","wrap","_context2","prev","next","fetch","concat","sent","abrupt","items","t0","Error","message","stop","handleSubmit","_callee","event","_context","preventDefault","_x2","_jsxs","className","onSubmit","onChange","inputValue","target","value","InputId","ButtonId","Map","src","avatar_url","alt","login","ImageId","href","html_url","rel","buttonText","id"],"sourceRoot":""}